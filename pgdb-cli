#!/usr/bin/env python

"""
CLI script for the Neo4j graph database.
"""

import pandas as pd
import py2neo

import database


def read_until_EOF():
    lines = list()
    while True:
        try:
            line = input(". " if lines else "> ")
        except EOFError:
            print("\r ")
            break
        if not line.strip():
            continue
        lines.append(line)
    return "\n".join(lines)

def handle_protein_interactions(cursor):
    nodes = pd.DataFrame(columns=["id", "external_id", "name", "description", "species_id"])
    edges = pd.DataFrame(columns=["source", "target", "score"])

    for row in cursor:
        source = row["source"]
        target = row["target"]
        score = row["score"]
        nodes.loc[source["id"]] = source
        nodes.loc[target["id"]] = target
        edges.loc[f"{source['id']}{target['id']}"] = {
            "source": source["id"],
            "target": target["id"],
            "score": score
        }

    return {
        "nodes": nodes,
        "edges": edges
    }

def handle_proteins(cursor):
    nodes = pd.DataFrame(columns=["id", "external_id", "name", "description", "species_id"])

    for row in cursor:
        protein = row["protein"]
        nodes.loc[protein["id"]] = protein

    return {
        "nodes": nodes
    }

def handle_pathways(cursor):
    nodes = pd.DataFrame(columns=["id", "name", "description", "species_id"])

    for row in cursor:
        pathway = row["pathway"]
        nodes.loc[pathway["id"]] = pathway

    return {
        "nodes": nodes
    }

def save():
    while True:
        option = input("Save (y/n)? ").lower().strip()
        if option == "y":
            return True
        elif option == "n":
            return False

def main():
    neo4j_graph = database.connect_neo4j()

    while True:
        query = read_until_EOF()
        if not query:
            continue

        try:
            cursor = neo4j_graph.run(query)
        except py2neo.database.ClientError as e:
            print(e)
            continue

        columns = cursor.keys()
        if "source" in columns and "target" in columns and "score" in columns:
            handle = handle_protein_interactions
        elif "protein" in columns:
            handle = handle_proteins
        elif "pathway" in columns:
            handle = handle_pathways

        dataframes = handle(cursor)
        for name, df in dataframes.items():
            print(f"[{name}]")
            print(df.head(n=5))
            if len(df) > 5:
                print("...")
            if save():
                path = input("\tPath: ")
                df.to_csv(path, index=False)

if __name__ == "__main__":
    try:
        main()
        print("\r ")
    except KeyboardInterrupt:
        pass
