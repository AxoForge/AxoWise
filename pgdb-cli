#!/usr/bin/env python

"""
CLI script for the Neo4j graph database.
"""

import readline
from pathlib import Path

import pandas as pd
import py2neo

import database
from utils import exit_on


def read_until_EOF():
    lines = list()

    @exit_on(EOFError)
    def read_line():
        line = input(". " if lines else "> ").strip()
        return line

    while True:
        line = read_line()
        if line is None:
            print(); break
        lines.append(line)
    return "\n".join(lines)

def handle_protein_interactions(cursor):
    nodes = pd.DataFrame(columns=["id", "external_id", "name", "description", "species_id"])
    edges = pd.DataFrame(columns=["source", "target", "score"])

    for row in cursor:
        source = row["source"]
        target = row["target"]
        score = row["score"]
        nodes.loc[source["id"]] = source
        nodes.loc[target["id"]] = target
        edges.loc[f"{source['id']}{target['id']}"] = {
            "source": source["id"],
            "target": target["id"],
            "score": score
        }

    return {
        "nodes": nodes,
        "edges": edges
    }

def handle_proteins(cursor):
    nodes = pd.DataFrame(columns=["id", "external_id", "name", "description", "species_id"])

    for row in cursor:
        protein = row["protein"]
        nodes.loc[protein["id"]] = protein

    return {
        "nodes": nodes
    }

def handle_pathways(cursor):
    nodes = pd.DataFrame(columns=["id", "name", "description", "species_id"])

    for row in cursor:
        pathway = row["pathway"]
        nodes.loc[pathway["id"]] = pathway

    return {
        "nodes": nodes
    }

def handle_drugs_compounds_diseases(cursor, columns):
    drugs = pd.DataFrame(columns=["id", "name"])
    compounds = pd.DataFrame(columns=["id", "name"])
    diseases = pd.DataFrame(columns=["id", "name"])

    for row in cursor:
        if "drug" in columns:
            drug = row["drug"]
            drugs.loc[drug["id"]] = drug
        if "compound" in columns:
            compound = row["compound"]
            compounds.loc[compound["id"]] = compound
        if "disease" in columns:
            disease = row["disease"]
            diseases.loc[disease["id"]] = disease

    dataframes = dict()
    if len(drugs) > 0:
        dataframes["drugs"] = drugs
    if len(compounds) > 0:
        dataframes["compounds"] = compounds
    if len(diseases) > 0:
        dataframes["diseases"] = diseases

    return dataframes

def handle_rest(cursor, columns):
    dataframe = pd.DataFrame(columns=columns)

    for idx, row in enumerate(cursor):
        dataframe.loc[idx] = row

    return {
        "table": dataframe
    }

@exit_on(py2neo.status.ClientError, print_msg=True)
def run_query(neo4j_graph, query):
    cursor = neo4j_graph.run(query)
    return cursor

@exit_on(KeyboardInterrupt)
def save():
    while True:
        option = input("Save (y/n)? ").lower().strip()
        if option == "y":
            return True
        elif option == "n":
            return False

@exit_on(Exception, print_msg=True)
@exit_on(KeyboardInterrupt)
def get_path():
    path_raw = input("Path: ")
    Path(path_raw).parent.mkdir(parents=True, exist_ok=True)
    return path_raw

_HANDLERS = [
    (lambda columns: "source" in columns and "target" in columns and "score" in columns, handle_protein_interactions),
    (lambda columns: "protein" in columns, handle_proteins),
    (lambda columns: "pathway" in columns, handle_pathways),
    (lambda columns: "drug" in columns or "compound" in columns or "disease" in columns, handle_drugs_compounds_diseases),
    (lambda columns: True, handle_rest)
]

_HEAD_N = 5

@exit_on(KeyboardInterrupt)
def main():
    neo4j_graph = database.connect_neo4j()

    print("=== Protein Graph Database CLI ===")

    while True:
        query = read_until_EOF()
        if not query:
            continue

        cursor = run_query(neo4j_graph, query)
        if not cursor:
            continue

        columns = cursor.keys()

        for predicate, handle in _HANDLERS:
            if predicate(columns):
                args = (cursor,)
                if handle is handle_rest or handle is handle_drugs_compounds_diseases:
                    args += (columns,)
                break

        dataframes = handle(*args)
        for name, df in dataframes.items():
            print(f"[{name}]")
            print(df.head(n=_HEAD_N))
            if len(df) > _HEAD_N:
                print("...")

            if save():
                path = get_path()
                if path is None:
                    print(); continue
                df.to_csv(path, index=False)

if __name__ == "__main__":
    main()
